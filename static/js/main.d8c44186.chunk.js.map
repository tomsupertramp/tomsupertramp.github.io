{"version":3,"sources":["store/types.js","store/reducer.js","store/actions.js","store/sagas.js","store/index.js","serviceWorker.js","components/Input/Input.jsx","components/Checkboxes/Checkboxes.jsx","components/Select/Select.jsx","components/Range/Range.jsx","views/Filters/FiltersComponent.jsx","views/Filters/FiltersContainer.js","views/Table/columns.js","views/Table/TableComponent.jsx","views/Table/TableContainer.js","App.jsx","index.js"],"names":["types","PUT_HOTELS","PUT_FILTERS","SUBMIT_FILTERS","PUT_FILTERED_HOTELS","RESET_FILTERS","initialState","entities","hotels","filters","isFiltered","filteredHotels","putHotels","type","payload","putFilters","submitFilters","putFilteredHotels","resetFilters","mainSaga","put","actions","countries","starsCounts","min_prices","map","country","stars","min_price","includes","push","select","state","reviews_amount","filter","hotel","countryFilter","value","typeFilter","length","item","starsFilter","reviewsAmountFilter","minPriceFilter","all","takeLatest","sagaMiddleware","createSagaMiddleware","middleware","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","action","applyMiddleware","run","Boolean","location","hostname","match","FormInput","name","field","label","props","Label","htmlFor","id","decimalSeparator","allowNegative","component","Checkbox","items","sort","a","b","render","values","form","arrayHelpers","InputGroup","key","checked","onChange","e","target","idx","indexOf","remove","FormSelect","options","isMulti","placeholder","setFieldValue","handleChange","RangeInput","withFormik","mapPropsToValues","filtersEntities","Math","max","apply","handleSubmit","resetForm","Form","onSubmit","FormGroup","Select","Checkboxes","Input","Range","maxValue","minValue","min","Button","color","onClick","disabled","connect","dispatch","FiltersComponent","Header","accessor","TableComponent","Object","keys","data","columns","sortable","resizable","minRows","defaultPageSize","showPageSizeOptions","App","Container","Row","Col","Navbar","dark","NavbarText","xs","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d8c44186.chunk.js","sourcesContent":["const types = {\n  PUT_HOTELS: 'PUT_HOTELS',\n  PUT_FILTERS: 'PUT_FILTERS',\n  SUBMIT_FILTERS: 'SUBMIT_FILTERS',\n  PUT_FILTERED_HOTELS: 'PUT_FILTERED_HOTELS',\n  RESET_FILTERS: 'RESET_FILTERS',\n};\n\nexport default types;","import types from './types';\n\nconst initialState = {\n  entities: {\n    hotels: [],\n    filters: {},\n  },\n  isFiltered: false,\n  filteredHotels: [],\n};\n\nexport default (state = initialState, action) => {\n  switch (action.type) {\n    case types.PUT_HOTELS:\n      return {\n        ...state,\n        entities: {\n          ...state.entities,\n          hotels: action.payload,\n        }\n      };\n\n    case types.PUT_FILTERS:\n      return {\n        ...state,\n        entities: {\n          ...state.entities,\n          filters: action.payload,\n        }\n      };\n      \n    case types.SUBMIT_FILTERS:\n      return {\n        ...state,\n        isFiltered: true,\n      };\n\n    case types.PUT_FILTERED_HOTELS:\n      return {\n        ...state,\n        filteredHotels: action.payload,\n      };\n\n    case types.RESET_FILTERS:\n      return {\n        ...state,\n        filteredHotels: [],\n        isFiltered: false,\n      };  \n\n    default:\n      return state;\n  }\n};\n\n","import types from './types';\n\nconst putHotels = hotels => ({ type: types.PUT_HOTELS, payload: hotels });\nconst putFilters = filters => ({ type: types.PUT_FILTERS, payload: filters });\nconst submitFilters = filters => ({ type: types.SUBMIT_FILTERS, filters });\nconst putFilteredHotels = hotels => ({ type: types.PUT_FILTERED_HOTELS, payload: hotels });\nconst resetFilters = () => ({ type: types.RESET_FILTERS });\n\nexport default {\n  putHotels,\n  putFilters,\n  submitFilters,\n  putFilteredHotels,\n  resetFilters,\n};\n","/* eslint-disable array-callback-return */\n\nimport {\n  all,\n  put,\n  takeLatest,\n  select,\n} from 'redux-saga/effects';\n\nimport actions from './actions';\nimport types from './types';\n\nimport { hotels } from '../hotels.json';\n\nfunction* putHotels() {\n  yield put(actions.putHotels(hotels));\n}\n\nfunction* putFilters() {\n  const countries = [];\n  const types = [];\n  const starsCounts = [];\n  const min_prices = [];\n\n  hotels.map(({ country, type, stars, min_price }) => {\n    if (!countries.includes(country)) {\n      countries.push(country);\n    }\n\n    if (!types.includes(type)) {\n      types.push(type);\n    }\n\n    if (!starsCounts.includes(stars)) {\n      starsCounts.push(stars);\n    }\n\n    if (!min_prices.includes(min_price)) {\n      min_prices.push(min_price);\n    }\n  });\n\n  yield put(actions.putFilters({\n    countries,\n    types,\n    starsCounts,\n    min_prices,\n  }))\n};\n\nfunction* submitFilters({ filters }) {\n  const hotels = yield select(state => state.entities.hotels);\n\n  const {\n    country,\n    type,\n    stars,\n    reviews_amount,\n    min_price,\n  } = filters;\n\n  const filteredHotels = hotels.filter(hotel => {\n    const countryFilter = !country || country.value === hotel.country;\n    const typeFilter = !type || type.length === 0 || type.map(item => item.value).includes(hotel.type);\n    const starsFilter = stars.length === 0 || stars.includes(hotel.stars);\n    const reviewsAmountFilter = !reviews_amount || reviews_amount <= hotel.reviews_amount;\n    const minPriceFilter = min_price >= hotel.min_price;\n\n    return countryFilter && typeFilter && starsFilter && reviewsAmountFilter && minPriceFilter;\n  })\n  \n  yield put(actions.putFilteredHotels(filteredHotels));\n}\n\nexport default function* mainSaga() {\n  yield all([\n    putHotels(),\n    putFilters(),\n    takeLatest(types.SUBMIT_FILTERS, submitFilters),\n  ]);\n}","import { applyMiddleware, createStore, compose } from 'redux';\nimport createSagaMiddleware from 'redux-saga';\n\nimport reducer from './reducer';\nimport mainSaga from './sagas';\n\nconst sagaMiddleware = createSagaMiddleware();\n\nconst middleware = [sagaMiddleware];\n\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\nconst store = createStore(reducer, composeEnhancers(applyMiddleware(...middleware)));\n\nsagaMiddleware.run(mainSaga);\n\nexport default store;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import PropTypes from 'prop-types';\nimport React from 'react';\nimport { Label } from 'reactstrap';\nimport { Field } from 'formik';\nimport NumberFormat from 'react-number-format';\n\nconst propTypes = {\n  name: PropTypes.string,\n  label: PropTypes.string,\n  placeholder: PropTypes.string,\n  type: PropTypes.string,\n};\n\nconst FormInput = ({\n  name,\n  field,\n  label,\n  type,\n  ...props\n}) => (\n  <div>\n    <Label htmlFor={name}>{label}</Label>\n    <div>\n      <NumberFormat\n        {...field}\n        {...props}\n        id={name}\n        type={type}\n        decimalSeparator={false}\n        allowNegative={false}\n      />\n    </div>\n  </div>\n);\n\nFormInput.propTypes = propTypes;\n\nexport default props => <Field name={props} component={FormInput} {...props} />;\n","import PropTypes from 'prop-types';\nimport React from 'react';\nimport { Label, InputGroup } from 'reactstrap';\nimport { FieldArray } from 'formik';\n\nconst propTypes = {\n  name: PropTypes.string,\n  items: PropTypes.array,\n  label: PropTypes.string,\n};\n\nconst Checkbox = ({\n  name,\n  items,\n  label,\n}) => {\n  items = items.sort((a, b) => a - b);\n  return (\n    <>\n      <Label>{label}</Label>\n      <FieldArray\n        name={name}\n        render={({ form: { values }, ...arrayHelpers }) => (\n          <>\n            {items.map(item => (\n              <InputGroup key={item}>\n                <Label>\n                  <input\n                    name={name}\n                    type=\"checkbox\"\n                    value={item}\n                    checked={values.stars.includes(item)}\n                    onChange={e => {\n                      if (e.target.checked) arrayHelpers.push(item);\n                      else {\n                        const idx = values.stars.indexOf(item);\n                        arrayHelpers.remove(idx);\n                      }\n                    }}\n                  />\n                  {\" \"}\n                  {item}\n                </Label>\n            </InputGroup>\n            ))}\n          </>\n        )}\n      />\n    </>\n  );\n};\n\nCheckbox.propTypes = propTypes;\n\nexport default Checkbox;","import PropTypes from 'prop-types';\nimport React from 'react';\nimport { Label } from 'reactstrap';\nimport Select from 'react-select';\nimport { Field } from 'formik';\n\nconst propTypes = {\n  name: PropTypes.string,\n  label: PropTypes.string,\n  children: PropTypes.node,\n  isMulti: PropTypes.bool,\n};\n\nconst FormSelect = ({\n  options,\n  name,\n  label,\n  field,\n  form,\n  isMulti,\n}) => {\n  const handleChange = (value) => {\n    form.setFieldValue(field.name, value);\n  };\n\n  return (\n    <div>\n      <Label>{label}</Label>\n      <Select\n        {...field}\n        placeholder=\"Выбрать\"\n        options={options}\n        onChange={value => handleChange(value)}\n        type=\"text\"\n        isMulti={isMulti}\n      />\n    </div>\n  );\n};\n\nFormSelect.propTypes = propTypes;\n\nexport default props => <Field name={props} component={FormSelect} {...props} />;\n","import PropTypes from 'prop-types';\nimport React from 'react';\nimport { Label } from 'reactstrap';\nimport { Field } from 'formik';\nimport Slider from 'react-input-range';\n\nconst propTypes = {\n  name: PropTypes.string,\n  label: PropTypes.string,\n};\n\nconst RangeInput = ({\n  name,\n  field,\n  form,\n  label,\n  ...props\n}) => {\n  const handleChange = (value) => {\n    form.setFieldValue(field.name, value);\n  };\n\n  return (\n    <div>\n      <Label htmlFor={name}>{label}</Label>\n      <div>\n        <Slider\n          {...field}\n          {...props}\n          onChange={value => handleChange(value)}\n        />\n      </div>\n    </div>\n  );\n};\n\nRangeInput.propTypes = propTypes;\n\nexport default props => <Field name={props} component={RangeInput} {...props} />;\n","import PropTypes from 'prop-types';\nimport React from 'react';\nimport { \n  Form,  \n  FormGroup, \n  Button,\n} from 'reactstrap';\nimport { withFormik } from 'formik';\n\n/* Components */\nimport {\n  Checkboxes,\n  Select,\n  Input,\n  Range,\n} from '../../components';\n\nconst propTypes = {\n  filtersEntities: PropTypes.object,\n  handleSubmit: PropTypes.func,\n  resetFilters: PropTypes.func,\n  resetForm: PropTypes.func,\n  isFiltered: PropTypes.bool,\n};\n\nconst Filters = ({ \n  filtersEntities, \n  handleSubmit, \n  resetFilters, \n  resetForm,\n  isFiltered,\n}) => (\n    <Form onSubmit={handleSubmit}>\n      <FormGroup>\n        <Select\n          label=\"Страна\"\n          name=\"country\"\n          options={filtersEntities.countries.map(value => ({ value, label: value }))}\n        />\n      </FormGroup>\n\n      <FormGroup>\n        <Select\n          label=\"Tип\"\n          name=\"type\"\n          isMulti\n          options={filtersEntities.types.map(value => ({ value, label: value }))} \n        />\n      </FormGroup>\n\n      <FormGroup>\n        <Checkboxes\n          label=\"Звезды\"\n          name=\"stars\"\n          items={filtersEntities.starsCounts}\n        />\n      </FormGroup>\n\n      <FormGroup>\n        <Input\n          label=\"Количество отзывов от\"\n          name=\"reviews_amount\"\n        />\n      </FormGroup>\n\n      <FormGroup>\n        <Range\n          label=\"Цена до\"\n          name=\"min_price\"\n          maxValue={Math.max.apply(Math, filtersEntities.min_prices)}\n          minValue={Math.min.apply(Math, filtersEntities.min_prices)}\n        />\n      </FormGroup>\n\n      <br />\n      <FormGroup>\n        <Button color=\"primary\" type=\"submit\">Применить фильтры</Button>\n      </FormGroup>\n\n      <FormGroup>\n        <Button\n          color=\"secondary\"\n          onClick={() => {\n            resetFilters();\n            resetForm();\n          }}\n          disabled={!isFiltered}\n        >\n          Сбросить\n        </Button>\n      </FormGroup>\n      \n    </Form>\n);\n\nFilters.propTypes = propTypes;\n\nexport default withFormik({\n  mapPropsToValues: ({ filtersEntities }) => ({\n    country: '',\n    type: [],\n    stars: [],\n    reviews_amount: '',\n    min_price: Math.max.apply(Math, filtersEntities.min_prices),\n  }),\n  handleSubmit: (values, { props: { submitFilters } }) => {\n    submitFilters(values);\n  },\n})(Filters);\n\n","import { connect } from 'react-redux';\nimport FiltersComponent from './FiltersComponent';\n\nimport actions from 'store/actions';\n\nconst mapStateToProps = ({ entities: { filters }, isFiltered }) => ({\n  filtersEntities: filters,\n  isFiltered,\n});\n\nconst mapDispatchToProps = dispatch => ({\n  submitFilters: filters => dispatch(actions.submitFilters(filters)),\n  resetFilters: () => dispatch(actions.resetFilters()),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(FiltersComponent);","export default [\n  {\n    Header: 'Страна',\n    accessor: 'country',\n  },\n  {\n    Header: 'Тип',\n    accessor: 'type',\n  },\n  {\n    Header: 'Звезды',\n    accessor: 'stars',\n  },\n  {\n    Header: 'Кол-во отзывов',\n    accessor: 'reviews_amount',\n  },\n  {\n    Header: 'Мин $',\n    accessor: 'min_price',\n  },\n];","import PropTypes from 'prop-types';\nimport React from 'react';\nimport ReactTable from 'react-table';\n\nimport columns from './columns';\n\nconst propTypes = {\n  hotels: PropTypes.array,\n  filteredHotels: PropTypes.array,\n  isFiltered: PropTypes.bool,\n};\n\nconst TableComponent = ({ hotels, filteredHotels, isFiltered }) => \n  isFiltered && Object.keys(filteredHotels).length === 0 \n  ? <p>Не найдено...</p>\n  : (\n    <ReactTable\n      data={Object.keys(filteredHotels).length !== 0 ? filteredHotels : hotels}\n      columns={columns}\n      sortable={false}\n      resizable={false}\n      minRows={0}\n      defaultPageSize={3}\n      showPageSizeOptions={false}\n    />\n  );\n\nTableComponent.propTypes = propTypes;\n\nexport default TableComponent;\n","import { connect } from 'react-redux';\nimport TableComponent from './TableComponent';\n\nconst mapStateToProps = ({ entities: { hotels }, isFiltered, filteredHotels }) => ({\n  hotels,\n  isFiltered,\n  filteredHotels,\n});\n\nexport default connect(mapStateToProps)(TableComponent);","import React from 'react';\nimport { \n  Container, \n  Row, \n  Col,\n  Navbar,\n  NavbarText,\n} from 'reactstrap';\n\n/* Components */\nimport Filters from './views/Filters';\nimport Table from './views/Table';\n\n/* Styles */\nimport './App.css';\n\nconst App = () => (\n  <Container>\n    <Row>\n      <Col>\n        <Navbar color='dark' dark>\n          <NavbarText>Тестовое задание для TravelAsk</NavbarText>\n        </Navbar>\n      </Col> \n    </Row>\n    <br />\n    <Row>\n      <Col xs='4'>\n        <Filters />\n      </Col>\n      <Col xs='8'>\n        <Table />\n      </Col>\n    </Row>\n  </Container>\n);\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\n\nimport store from './store';\nimport * as serviceWorker from './serviceWorker';\n\n/* Components */\nimport App from './App';\n\n/* Styles */\nimport 'bootstrap/dist/css/bootstrap.css';\nimport 'react-table/react-table.css';\nimport 'react-input-range/lib/css/index.css';\nimport './index.css';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}