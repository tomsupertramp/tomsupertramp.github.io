{"version":3,"sources":["views/ducks/types.js","views/ducks/actions.js","views/ducks/reducers.js","api/models.js","api/index.js","views/ducks/sagas.js","views/ducks/index.js","store/sagas/index.js","store/reducer.js","store/index.js","views/Header/HeaderComponent.jsx","views/Header/HeaderContainer.js","AppComponent.jsx","AppContainer.js","serviceWorker.js","index.js"],"names":["types","GET_USERS_REQUEST","GET_ALL_USERS_SUCCESS","GET_USER_SUCCESS","GET_USERS_FAILURE","GET_TASKS_REQUEST","GET_ALL_TASKS_SUCCESS","GET_USER_TASKS_SUCCESS","GET_TASKS_FAILURE","UPDATE_PROFILE_REQUEST","UPDATE_PROFILE_SUCCESS","UPDATE_PROFILE_FAILURE","getUsers","params","type","getTasks","updateProfile","values","initialState","profile","allTasks","allUsers","userTasks","state","action","data","METHOD","tasks","method","url","model","get","models","config","id","JSON","stringify","headers","axios","request","then","res","catch","err","mainSaga","user","schema","Entity","idAttribute","call","api","put","normalizedData","normalize","entities","users","GET_PROFILE_FAILURE","console","log","takeEvery","takeLatest","rootSaga","all","fork","history","sagaMiddleware","createSagaMiddleware","createBrowserHistory","middleware","routerMiddleware","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","combineReducers","router","connectRouter","app","appReducer","applyMiddleware","run","HeaderComponent","name","className","to","activeClassName","exact","connect","Loading","Tasks","Loadable","loader","loading","Profile","App","location","path","component","dispatch","actions","lifecycle","componentDidMount","this","props","AppComponent","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.f3ae481b.chunk.js","sourcesContent":["const types = {\n  GET_USERS_REQUEST: 'GET_USERS_REQUEST',\n  GET_ALL_USERS_SUCCESS: 'GET_ALL_USERS_SUCCESS',\n  GET_USER_SUCCESS: 'GET_USER_SUCCESS',\n  GET_USERS_FAILURE: 'GET_USERS_FAILURE',\n\n  GET_TASKS_REQUEST: 'GET_TASKS_REQUEST',\n  GET_ALL_TASKS_SUCCESS: 'GET_ALL_TASKS_SUCCESS',\n  GET_USER_TASKS_SUCCESS: 'GET_USER_TASKS_SUCCESS',\n  GET_TASKS_FAILURE: 'GET_TASKS_FAILURE',\n\n  UPDATE_PROFILE_REQUEST: 'UPDATE_PROFILE_REQUEST',\n  UPDATE_PROFILE_SUCCESS: 'UPDATE_PROFILE_SUCCESS',\n  UPDATE_PROFILE_FAILURE: 'UPDATE_PROFILE_FAILURE',\n};\n\nexport default types;","import types from './types';\n\nconst getUsers = params => ({ type: types.GET_USERS_REQUEST, params });\nconst getTasks = params => ({ type: types.GET_TASKS_REQUEST, params });\nconst updateProfile = values => ({ type: types.UPDATE_PROFILE_REQUEST, values });\n\nexport default {\n  getUsers,\n  getTasks,\n  updateProfile,\n};","import types from './types';\n\nconst initialState = {\n  profile: {},\n  allTasks: [],\n  allUsers: {},\n  userTasks: [],\n};\n\nexport default (state = initialState, action) => {\n  switch (action.type) {\n    case types.GET_USER_SUCCESS:\n      return {\n        ...state,\n        profile: action.data,\n      };\n    case types.GET_ALL_USERS_SUCCESS:\n      return {\n        ...state,\n        allUsers: action.data,\n      };  \n    case types.GET_ALL_TASKS_SUCCESS:\n      return {\n        ...state,\n        allTasks: action.data,\n      };\n    case types.GET_USER_TASKS_SUCCESS:\n      return {\n        ...state,\n        userTasks: action.data,\n      };  \n    default:\n      return state;\n  }\n};\n","export const METHOD = {\n  GET: 'get',\n  POST: 'post',\n  PUT: 'put',\n};\n\nexport default {\n  tasks: {\n    method: METHOD.GET,\n    url: 'todos',\n  },\n  profile: {\n    method: METHOD.GET,\n    url: 'users',\n  },\n  updateProfile: {\n    method: METHOD.PUT,\n    url: 'users',\n  },\n};\n","import axios from 'axios';\nimport { get } from 'lodash';\n\n/* Models */\nimport models from './models';\n\nexport default (method, params) => {\n\n  const model = get(models, method, '');\n  const endpoint = model.method === 'put'\n    ? `https://jsonplaceholder.typicode.com/${model.url}/${params.id}`\n    : `https://jsonplaceholder.typicode.com/${model.url}`;\n\n  const config = {\n    url: endpoint,\n    method: model.method,\n    data: JSON.stringify(params),\n    params: model.method === 'get' && params ? params : null,\n    headers: {\n      \"Content-type\": \"application/json; charset=UTF-8\",\n    }\n  };\n\n  const request = axios.request(config)\n    .then(res => res.data)\n    .catch(err => err);\n\n  return request;\n};","import {\n  call,\n  put,\n  takeEvery,\n  takeLatest,\n} from 'redux-saga/effects';\nimport { get } from 'lodash';\nimport { normalize, schema } from 'normalizr';\n\n/* API */\nimport api from 'api';\n\n/* Types */\nimport types from './types';\n\nconst user = new schema.Entity('users', {}, { idAttribute: 'id' });\n\nfunction* getUsers({ params }) {\n  const id = get(params, 'id', null);\n\n  try {\n    const data = yield call(api, 'profile', id && { id });\n\n    if (data) {\n      if (id) {\n        yield put({ \n          type: types.GET_USER_SUCCESS, \n          data: data[0],\n        });\n      } else {\n        const normalizedData = normalize(data, [user]);\n        yield put({ \n          type: types.GET_ALL_USERS_SUCCESS, \n          data: normalizedData.entities.users,\n        });\n      }\n      \n    }\n  } catch (e) {\n    yield put({ type: types.GET_PROFILE_FAILURE });\n  }\n}\n\nfunction* getTasks({ params }) {\n  const id = get(params, 'id', null);\n\n  try {\n    const data = yield call(api, 'tasks', id && { id });\n\n    if (data) {\n      yield put({ \n        type: id ? types.GET_USER_TASKS_SUCCESS : types.GET_ALL_TASKS_SUCCESS, \n        data,\n      });\n    }\n  } catch (e) {\n    yield put({ type: types.GET_TASKS_FAILURE });\n  }\n}\n\nfunction* updateProfile({ values }) {\n  console.log(values);\n  try {\n    const data = yield call(api, 'updateProfile', {...values});\n\n    if (data) {\n      yield put({ \n        type: types.UPDATE_PROFILE_SUCCESS, \n        data,\n      });\n    }\n  } catch (e) {\n    yield put({ type: types.UPDATE_PROFILE_FAILURE });\n  }\n}\n\nexport function* mainSaga() {\n  yield takeEvery(types.GET_USERS_REQUEST, getUsers);\n  yield takeEvery(types.GET_TASKS_REQUEST, getTasks);\n  yield takeLatest(types.UPDATE_PROFILE_REQUEST, updateProfile);\n}\n","export { default as actions } from './actions';\nexport { default as types } from './types';\nexport { default as reducer } from './reducers';\nexport { mainSaga } from './sagas';\n","import {\n  all,\n  fork,\n} from 'redux-saga/effects';\n\n/* Sagas */\nimport { mainSaga } from 'views/ducks';\n\nexport default function* rootSaga() {\n  yield all([\n    fork(mainSaga),\n  ]);\n}","import { combineReducers } from 'redux';\nimport { connectRouter } from 'connected-react-router';\n\n/* Reducers */\nimport { reducer as appReducer } from 'views/ducks';\n\nexport default (history) => combineReducers({\n  router: connectRouter(history),\n  app: appReducer,\n});","import { applyMiddleware, createStore, compose } from 'redux';\nimport createSagaMiddleware from 'redux-saga';\nimport { createBrowserHistory } from 'history';\nimport { routerMiddleware } from 'connected-react-router';\n\nimport rootSaga from './sagas';\nimport reducer from './reducer';\n\nconst sagaMiddleware = createSagaMiddleware();\nexport const history = createBrowserHistory();\n\nconst rMiddleware = routerMiddleware(history);\nconst middleware = [rMiddleware, sagaMiddleware];\n\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\nconst store = createStore(reducer(history), composeEnhancers(applyMiddleware(...middleware)));\n\nsagaMiddleware.run(rootSaga);\n\nexport default store;","import PropTypes from 'prop-types';\nimport React from 'react';\nimport { NavLink } from 'react-router-dom';\n\nconst propTypes = {\n  name: PropTypes.string,\n};\n\nconst HeaderComponent = ({ name }) => (\n  <nav className=\"navbar navbar-expand-lg navbar-light bg-light\">\n    <div className=\"collapse navbar-collapse\">\n      <ul className=\"navbar-nav mr-auto\">\n        <li className=\"nav-item\">\n          <NavLink className=\"nav-link\" to=\"/\" activeClassName=\"active\" exact>Все задачи</NavLink>\n        </li>\n        <li className=\"nav-item\">\n          <NavLink className=\"nav-link\" to=\"/profile\" activeClassName=\"active\">Мои задачи</NavLink>\n        </li>\n      </ul>\n        <span className=\"navbar-text\">\n          {name}\n        </span>\n    </div>\n  </nav>\n);\n\nHeaderComponent.propTypes = propTypes;\n\nexport default HeaderComponent;\n","import { connect } from 'react-redux';\n \n/* Components */\nimport HeaderComponent from './HeaderComponent';\n\nconst mapStateToProps = ({ app: { profile } }) => ({ name: profile.name });\n\nexport default connect(mapStateToProps)(HeaderComponent);","import React from 'react';\nimport { Switch, Route } from 'react-router-dom';\nimport Loadable from 'react-loadable';\n\n/* Components */\nimport Header from './views/Header';\n// import Tasks from './views/Tasks';\n// import Profile from './views/Profile';\n\nimport './App.css';\n\nconst Loading = () => <div>Loading...</div>;\n\nconst Tasks = Loadable({\n  loader: () => import('./views/Tasks'),\n  loading: Loading,\n});\n\nconst Profile = Loadable({\n  loader: () => import('./views/Profile'),\n  loading: Loading,\n});\n\nconst App = ({ location }) => (\n  <div>\n    <Header />\n    <Switch location={location}>\n      <Route path=\"/\" component={Tasks} exact />\n      <Route\n        path=\"/profile\"\n        component={Profile}\n      />\n    </Switch>\n  </div>\n  \n);\n\nexport default App;\n","import { connect } from 'react-redux';\nimport { compose, lifecycle } from 'recompose';\n\n/* Actions */\nimport { actions } from 'views/ducks';\n\n/* Components */\nimport AppComponent from './AppComponent';\n\nconst mapStateToProps = ({ router }) => ({ location: router.location });\n\nconst mapDispatchToProps = dispatch => ({\n  getUsers: params => dispatch(actions.getUsers(params)),\n});\n\nexport default compose(\n  connect(mapStateToProps, mapDispatchToProps),\n  lifecycle({\n    componentDidMount() {\n      const { getUsers } = this.props;\n      getUsers({ id: 1 });\n      getUsers();\n    },\n  }),\n)(AppComponent);","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { ConnectedRouter } from 'connected-react-router';\nimport store, { history } from './store';\n\nimport App from './AppContainer';\n\nimport './index.css';\n\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <Provider store={store}>\n    <ConnectedRouter history={history}>\n      <App />\n    </ConnectedRouter>\n  </Provider>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}